{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["initiateAnimations","window","innerWidth","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","target","style","width","threshold","document","querySelectorAll","animation","observe","isIntersecting","classList","add","IndexPage","data","title","sanityPages","seo","seo_title","description","meta_description","id","allSanityProjects","edges","map","edge","i","to","node","slug","current","className","key","alt","fluid","mainImage","asset","onLoad"],"mappings":"grUAoFA,SAASA,IAGP,GAAIC,OAAOC,WAAa,KAAM,CAE5B,IAeMC,EAAW,IAAIC,sBAfE,SAACC,EAASF,GAC/BE,EAAQC,SAAQ,SAAAC,GAEkB,IAA5BA,EAAMC,kBACRD,EAAME,OAAOC,MAAMC,MAAQ,QAE3BJ,EAAME,OAAOC,MAAMC,MAAQ,aAMjB,CACdC,UAAW,IAKMC,SAASC,iBAAiB,cAClCR,SAAQ,SAAAS,GACjBZ,EAASa,QAAQD,UAEd,CAEL,IAcMZ,EAAW,IAAIC,sBAdE,SAACC,EAASF,GAC/BE,EAAQC,SAAQ,SAAAC,GAEVA,EAAMU,gBAAkBV,EAAMC,mBAAqB,GACrDD,EAAME,OAAOS,UAAUC,IAAI,2BAOjB,CACdP,UAAW,KAKMC,SAASC,iBAAiB,cAClCR,SAAQ,SAAAS,GACjBZ,EAASa,QAAQD,OApDRK,UArEG,WAChB,IAAMC,EAAI,OAkCV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOD,EAAKE,YAAYC,IAAIC,UAC5BC,YAAaL,EAAKE,YAAYC,IAAIG,mBAEpC,6BAASC,GAAG,SACV,kBAAC,IAAD,MACA,qCACA,mEAEA,4BACGP,EAAKQ,kBAAkBC,MAAMC,KAAI,SAASC,EAAMC,GAC/C,OACE,kBAAC,OAAD,CAAMC,GAAIF,EAAKG,KAAKC,KAAKC,SACvB,wBAAIC,UAAU,iCAAiCC,IAAKN,GAClD,kBAAC,IAAD,CACEO,IAAG,YAAcR,EAAKG,KAAKb,MAC3BgB,UAAU,mBACVC,IAAKN,EACLQ,MAAOT,EAAKG,KAAKO,UAAUC,MAAMF,MACjCG,OAAQ5C,IAEV,wBAAIuC,IAAKN,GAAID,EAAKG,KAAKb","file":"component---src-pages-index-js-71e09f942af1d09e7c6c.js","sourcesContent":["import React from \"react\"\n// import { Link } from \"gatsby\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Logo from \"../images/assets/logo.svg\"\n// import RewriteMarkdown from \"../components/RewriteMarkdown\"\n\nconst IndexPage = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allSanityProjects {\n        edges {\n          node {\n            _id\n            title\n            slug {\n              current\n            }\n            mainImage {\n              asset {\n                fluid {\n                  ...GatsbySanityImageFluid\n                }\n              }\n            }\n          }\n        }\n      }\n      sanityPages(_id: { eq: \"db68df85-d952-4844-a8ea-b0b72ae8f3c7\" }) {\n        seo {\n          _type\n          focus_keyword\n          seo_title\n          meta_description\n          _key\n        }\n        title\n        _id\n      }\n    }\n  `)\n\n  return (\n    <Layout>\n      <SEO\n        title={data.sanityPages.seo.seo_title}\n        description={data.sanityPages.seo.meta_description}\n      />\n      <section id=\"index\">\n        <Logo />\n        <h1>Kodex</h1>\n        <h2>Modern webistes with a nordic touch</h2>\n\n        <ol>\n          {data.allSanityProjects.edges.map(function(edge, i) {\n            return (\n              <Link to={edge.node.slug.current}>\n                <li className=\"animation  animation--fade-up \" key={i}>\n                  <Img\n                    alt={`Project: ${edge.node.title}`}\n                    className=\"img-hover-effect\"\n                    key={i}\n                    fluid={edge.node.mainImage.asset.fluid}\n                    onLoad={initiateAnimations}\n                  />\n                  <h3 key={i}>{edge.node.title}</h3>\n                </li>\n              </Link>\n            )\n          })}\n        </ol>\n      </section>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\n// animations\n\nfunction initiateAnimations() {\n  // Reset opacity\n\n  if (window.innerWidth > 1024) {\n    // callback function to do animations\n    const scrollImations = (entries, observer) => {\n      entries.forEach(entry => {\n        // only do animation if the element is fully on screen\n        if (entry.intersectionRatio !== 1) {\n          entry.target.style.width = \"500px\"\n        } else {\n          entry.target.style.width = \"580px\"\n        }\n      })\n    }\n\n    // create the observer\n    const options = {\n      threshold: 1,\n    }\n    const observer = new IntersectionObserver(scrollImations, options)\n\n    // target the elements to be observed\n    const animations = document.querySelectorAll(\".animation\")\n    animations.forEach(animation => {\n      observer.observe(animation)\n    })\n  } else {\n    // callback function to do animations\n    const scrollImations = (entries, observer) => {\n      entries.forEach(entry => {\n        // only do animation if the element is fully on screen\n        if (entry.isIntersecting && entry.intersectionRatio >= 0) {\n          entry.target.classList.add(\"animation--visible\")\n        } else {\n        }\n      })\n    }\n\n    // create the observer\n    const options = {\n      threshold: 0.2,\n    }\n    const observer = new IntersectionObserver(scrollImations, options)\n\n    // target the elements to be observed\n    const animations = document.querySelectorAll(\".animation\")\n    animations.forEach(animation => {\n      observer.observe(animation)\n    })\n  }\n}\n"],"sourceRoot":""}