{"version":3,"sources":["webpack:///./src/templates/project.js"],"names":["query","imageIsLoaded","allBlockContent","document","querySelector","allChildrenElements","children","index","length","element","classList","add","console","log","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","intersectionRatio","target","threshold","querySelectorAll","animation","observe","initiateAnimations","window","addEventListener","scrollFunctionImage","body","scrollTop","documentElement","remove","Project","props","title","data","sanityProjects","seo","seo_title","description","meta_description","image","mainImage","asset","fluid","src","id","alt","onLoad","className","categories","map","category","href","websiteUrl","blocks","_rawBody","serializers","projectId","dataset"],"mappings":"4FAAA,oJAWaA,EAAK,aAoHlB,SAASC,KAvCT,WAIE,IAHA,IAAMC,EAAkBC,SAASC,cAAc,oBACzCC,EAAsBH,EAAgBI,SAEnCC,EAAQ,EAAGA,EAAQF,EAAoBG,OAAQD,IAAS,CAC/D,IAAME,EAAUJ,EAAoBE,GACpCE,EAAQC,UAAUC,IAAI,aACtBF,EAAQC,UAAUC,IAAI,sBAMxBC,QAAQC,IAAIX,EAAgBI,UAG5B,IAcMQ,EAAW,IAAIC,sBAdE,SAACC,EAASF,GAC/BE,EAAQC,SAAQ,SAAAC,GAEVA,EAAMC,gBAAkBD,EAAME,mBAAqB,GACrDF,EAAMG,OAAOX,UAAUC,IAAI,2BAOjB,CACdW,UAAW,KAKMnB,SAASoB,iBAAiB,cAClCN,SAAQ,SAAAO,GACjBV,EAASW,QAAQD,MAKnBE,GACAC,OAAOC,iBAAiB,SAAUC,GAGpC,SAASA,IACH1B,SAAS2B,KAAKC,UAAY,GAAK5B,SAAS6B,gBAAgBD,UAAY,GACtEnB,QAAQC,IAAIV,SAASC,cAAc,eAEnCD,SAASC,cAAc,cAAcM,UAAUC,IAAI,cAEnDR,SAASC,cAAc,cAAcM,UAAUuB,OAAO,aAtD3CC,UA3CC,SAAAC,GACd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOD,EAAME,KAAKC,eAAeC,IAAIC,UACrCC,YAAaN,EAAME,KAAKC,eAAeC,IAAIG,iBAC3CC,MAAOR,EAAME,KAAKC,eAAeM,UAAUC,MAAMC,MAAMC,MAEzD,6BAASC,GAAG,eACV,kBAAC,IAAD,CACEC,IAAG,YAAcd,EAAME,KAAKC,eAAeF,MAC3CU,MAAOX,EAAME,KAAKC,eAAeM,UAAUC,MAAMC,MACjDI,OAAQjD,EACRkD,UAAU,cAGZ,yBAAKA,UAAU,mBACb,4BAAKhB,EAAME,KAAKC,eAAeF,OAC/B,4BACGD,EAAME,KAAKC,eAAec,WAAWC,KAAI,SAASC,GACjD,OAAO,4BAAKA,OAIhB,uBAAGC,KAAMpB,EAAME,KAAKC,eAAekB,WAAYL,UAAU,aAAzD,cAIA,6BACE,kBAAC,IAAD,CACEM,OAAQtB,EAAME,KAAKC,eAAeoB,SAClCC,YAAaA,IACbC,UAAU,WACVC,QAAQ,aACRV,UAAU","file":"component---src-templates-project-js-021915fe7a7ffb4a1ec1.js","sourcesContent":["import React from \"react\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport BlockContent from \"@sanity/block-content-to-react\"\nimport serializers from \"../components/serializers\"\n// import { func } from \"prop-types\"\n\nexport const query = graphql`\n  query($Slug: String) {\n    sanityProjects(slug: { current: { eq: $Slug } }) {\n      seo {\n        _key\n        _type\n        focus_keyword\n        seo_title\n        meta_description\n      }\n      title\n      categories\n      _rawBody\n      websiteUrl\n      body {\n        sanityChildren {\n          text\n        }\n      }\n      mainImage {\n        asset {\n          fluid(maxWidth: 1400) {\n            ...GatsbySanityImageFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Project = props => {\n  return (\n    <Layout>\n      <SEO\n        title={props.data.sanityProjects.seo.seo_title}\n        description={props.data.sanityProjects.seo.meta_description}\n        image={props.data.sanityProjects.mainImage.asset.fluid.src}\n      />\n      <section id=\"projectPost\">\n        <Img\n          alt={`Project: ${props.data.sanityProjects.title}`}\n          fluid={props.data.sanityProjects.mainImage.asset.fluid}\n          onLoad={imageIsLoaded}\n          className=\"postImage\"\n        ></Img>\n\n        <div className=\"content_wrapper\">\n          <h1>{props.data.sanityProjects.title}</h1>\n          <ol>\n            {props.data.sanityProjects.categories.map(function(category) {\n              return <li>{category}</li>\n            })}\n          </ol>\n\n          <a href={props.data.sanityProjects.websiteUrl} className=\"visitSite\">\n            Visit site\n          </a>\n\n          <div>\n            <BlockContent\n              blocks={props.data.sanityProjects._rawBody}\n              serializers={serializers}\n              projectId=\"j7i4hfvy\"\n              dataset=\"production\"\n              className=\"allBlockContent\"\n            />\n          </div>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default Project\n\n// animations\n\nfunction initiateAnimations() {\n  const allBlockContent = document.querySelector(\".allBlockContent\")\n  const allChildrenElements = allBlockContent.children\n\n  for (let index = 1; index < allChildrenElements.length; index++) {\n    const element = allChildrenElements[index]\n    element.classList.add(\"animation\")\n    element.classList.add(\"animation--fade-up\")\n  }\n\n  // allChildrenElements.classList.add(\"animation\")\n  // allChildrenElements.classList.add(\"animation--fade-up\")\n\n  console.log(allBlockContent.children)\n\n  // callback function to do animations\n  const scrollImations = (entries, observer) => {\n    entries.forEach(entry => {\n      // only do animation if the element is fully on screen\n      if (entry.isIntersecting && entry.intersectionRatio >= 0) {\n        entry.target.classList.add(\"animation--visible\")\n      } else {\n      }\n    })\n  }\n\n  // create the observer\n  const options = {\n    threshold: 0.2,\n  }\n  const observer = new IntersectionObserver(scrollImations, options)\n\n  // target the elements to be observed\n  const animations = document.querySelectorAll(\".animation\")\n  animations.forEach(animation => {\n    observer.observe(animation)\n  })\n}\n\nfunction imageIsLoaded() {\n  initiateAnimations()\n  window.addEventListener(\"scroll\", scrollFunctionImage)\n}\n\nfunction scrollFunctionImage() {\n  if (document.body.scrollTop > 1 || document.documentElement.scrollTop > 1) {\n    console.log(document.querySelector(\".postImage\"))\n\n    document.querySelector(\".postImage\").classList.add(\"scaledIMG\")\n  } else {\n    document.querySelector(\".postImage\").classList.remove(\"scaledIMG\")\n  }\n}\n"],"sourceRoot":""}