{"version":3,"sources":["webpack:///./src/templates/blog.js"],"names":["query","initiateAnimations","allBlockContent","document","querySelector","allChildrenElements","children","index","length","element","classList","add","console","log","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","intersectionRatio","target","threshold","querySelectorAll","animation","observe","BLog","props","title","data","sanityPost","seo","seo_title","description","meta_description","image","mainImage","asset","fluid","src","id","className","author","name","publishedAt","onLoad","alt","categories","map","category","blocks","_rawBody","projectId","dataset","serializers","allSanityPost","edges","edge","to","node","slug","current"],"mappings":"kRAWaA,EAAK,aAgIlB,SAASC,IAIP,IAHA,IAAMC,EAAkBC,SAASC,cAAc,oBACzCC,EAAsBH,EAAgBI,SAEnCC,EAAQ,EAAGA,EAAQF,EAAoBG,OAAQD,IAAS,CAC/D,IAAME,EAAUJ,EAAoBE,GACpCE,EAAQC,UAAUC,IAAI,aACtBF,EAAQC,UAAUC,IAAI,sBAMxBC,QAAQC,IAAIX,EAAgBI,UAG5B,IAcMQ,EAAW,IAAIC,sBAdE,SAACC,EAASF,GAC/BE,EAAQC,SAAQ,SAAAC,GAEVA,EAAMC,gBAAkBD,EAAME,mBAAqB,GACrDF,EAAMG,OAAOX,UAAUC,IAAI,2BAOjB,CACdW,UAAW,KAKMnB,SAASoB,iBAAiB,cAClCN,SAAQ,SAAAO,GACjBV,EAASW,QAAQD,MArCNE,UAvEF,SAAAC,GACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOD,EAAME,KAAKC,WAAWC,IAAIC,UACjCC,YAAaN,EAAME,KAAKC,WAAWC,IAAIG,iBACvCC,MAAOR,EAAME,KAAKC,WAAWM,UAAUC,MAAMC,MAAMC,MAErD,6BAASC,GAAG,YACV,4BAAKb,EAAME,KAAKC,WAAWF,OAE3B,yBAAKa,UAAU,gBACb,mCAEA,0CAAgBd,EAAME,KAAKC,WAAWY,OAAOC,MAC7C,mCACA,yCAAehB,EAAME,KAAKC,WAAWc,aACrC,oCAGF,kBAAC,IAAD,CACEC,OAAQ5C,EACRqC,MAAOX,EAAME,KAAKC,WAAWM,UAAUC,MAAMC,MAC7CQ,IAAKnB,EAAME,KAAKC,WAAWF,QAE7B,4BACGD,EAAME,KAAKC,WAAWiB,WAAWC,KAAI,SAASC,GAC7C,OACE,4BACE,uBAAGR,UAAU,iBAAiBQ,QAKtC,6BACE,kBAAC,IAAD,CACER,UAAU,kBACVS,OAAQvB,EAAME,KAAKC,WAAWqB,SAC9BC,UAAU,WACVC,QAAQ,aACRC,YAAaA,OAIjB,yBAAKb,UAAU,qBACb,6CAEA,wBAAIA,UAAU,4CACXd,EAAME,KAAK0B,cAAcC,MAAMR,KAAI,SAAAS,GAClC,OACE,kBAAC,OAAD,CAAMC,GAAE,SAAWD,EAAKE,KAAKC,KAAKC,SAChC,4BACE,kBAAC,IAAD,CACEvB,MAAOmB,EAAKE,KAAKvB,UAAUC,MAAMC,MACjCO,OAAQ5C,EACR6C,IAAKW,EAAKE,KAAK/B,QAEjB,wBAAIa,UAAU,cAAcgB,EAAKE,KAAK/B,OACtC,6CAAmB6B,EAAKE,KAAKf,qBAQ3C,kBAAC,IAAD","file":"component---src-templates-blog-js-061075b72929f9b58ece.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport BlockContent from \"@sanity/block-content-to-react\"\nimport serializers from \"../components/serializers\"\nimport Footer from \"../components/footer\"\n\nexport const query = graphql`\n  query($Slug: String) {\n    sanityPost(slug: { current: { eq: $Slug } }) {\n      seo {\n        _key\n        _type\n        focus_keyword\n        seo_title\n        meta_description\n      }\n      title\n      publishedAt\n      author {\n        name\n      }\n      categories\n      _rawBody\n      body {\n        sanityChildren {\n          text\n        }\n      }\n      mainImage {\n        asset {\n          fluid {\n            ...GatsbySanityImageFluid\n          }\n        }\n      }\n    }\n    allSanityPost(\n      limit: 10\n      filter: { slug: { current: { ne: $Slug } } }\n      sort: { fields: publishedAt, order: DESC }\n    ) {\n      edges {\n        node {\n          title\n          publishedAt\n          slug {\n            current\n          }\n          mainImage {\n            asset {\n              fluid(maxWidth: 300) {\n                ...GatsbySanityImageFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst BLog = props => {\n  return (\n    <Layout>\n      <SEO\n        title={props.data.sanityPost.seo.seo_title}\n        description={props.data.sanityPost.seo.meta_description}\n        image={props.data.sanityPost.mainImage.asset.fluid.src}\n      />\n      <section id=\"blogPost\">\n        <h1>{props.data.sanityPost.title}</h1>\n\n        <div className=\"blogPostInfo\">\n          <span>|</span>\n\n          <p>Written by: {props.data.sanityPost.author.name}</p>\n          <span>|</span>\n          <p>Published: {props.data.sanityPost.publishedAt}</p>\n          <span>|</span>\n        </div>\n\n        <Img\n          onLoad={initiateAnimations}\n          fluid={props.data.sanityPost.mainImage.asset.fluid}\n          alt={props.data.sanityPost.title}\n        ></Img>\n        <ol>\n          {props.data.sanityPost.categories.map(function(category) {\n            return (\n              <li>\n                <p className=\"post_category\">{category}</p>\n              </li>\n            )\n          })}\n        </ol>\n        <div>\n          <BlockContent\n            className=\"allBlockContent\"\n            blocks={props.data.sanityPost._rawBody}\n            projectId=\"j7i4hfvy\"\n            dataset=\"production\"\n            serializers={serializers}\n          />\n        </div>\n\n        <div className=\"more_post_wrapper\">\n          <h2>More Insights</h2>\n\n          <ol className=\" more_post animation  animation--fade-up\">\n            {props.data.allSanityPost.edges.map(edge => {\n              return (\n                <Link to={`/blog/${edge.node.slug.current}`}>\n                  <li>\n                    <Img\n                      fluid={edge.node.mainImage.asset.fluid}\n                      onLoad={initiateAnimations}\n                      alt={edge.node.title}\n                    />\n                    <h2 className=\"link_title\">{edge.node.title}</h2>\n                    <h3>Published at: {edge.node.publishedAt}</h3>\n                  </li>\n                </Link>\n              )\n            })}\n          </ol>\n        </div>\n      </section>\n      <Footer />\n    </Layout>\n  )\n}\n\nexport default BLog\n\nfunction initiateAnimations() {\n  const allBlockContent = document.querySelector(\".allBlockContent\")\n  const allChildrenElements = allBlockContent.children\n\n  for (let index = 0; index < allChildrenElements.length; index++) {\n    const element = allChildrenElements[index]\n    element.classList.add(\"animation\")\n    element.classList.add(\"animation--fade-up\")\n  }\n\n  // allChildrenElements.classList.add(\"animation\")\n  // allChildrenElements.classList.add(\"animation--fade-up\")\n\n  console.log(allBlockContent.children)\n\n  // callback function to do animations\n  const scrollImations = (entries, observer) => {\n    entries.forEach(entry => {\n      // only do animation if the element is fully on screen\n      if (entry.isIntersecting && entry.intersectionRatio >= 0) {\n        entry.target.classList.add(\"animation--visible\")\n      } else {\n      }\n    })\n  }\n\n  // create the observer\n  const options = {\n    threshold: 0.2,\n  }\n  const observer = new IntersectionObserver(scrollImations, options)\n\n  // target the elements to be observed\n  const animations = document.querySelectorAll(\".animation\")\n  animations.forEach(animation => {\n    observer.observe(animation)\n  })\n}\n"],"sourceRoot":""}